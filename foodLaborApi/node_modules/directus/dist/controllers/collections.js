"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const async_handler_1 = __importDefault(require("../utils/async-handler"));
const services_1 = require("../services");
const exceptions_1 = require("../exceptions");
const respond_1 = require("../middleware/respond");
const validate_batch_1 = require("../middleware/validate-batch");
const router = express_1.Router();
router.post('/', async_handler_1.default((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const collectionsService = new services_1.CollectionsService({
        accountability: req.accountability,
        schema: req.schema,
    });
    if (Array.isArray(req.body)) {
        const collectionKey = yield collectionsService.createMany(req.body);
        const records = yield collectionsService.readMany(collectionKey);
        res.locals.payload = { data: records || null };
    }
    else {
        const collectionKey = yield collectionsService.createOne(req.body);
        const record = yield collectionsService.readOne(collectionKey);
        res.locals.payload = { data: record || null };
    }
    return next();
})), respond_1.respond);
const readHandler = async_handler_1.default((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const collectionsService = new services_1.CollectionsService({
        accountability: req.accountability,
        schema: req.schema,
    });
    const metaService = new services_1.MetaService({
        accountability: req.accountability,
        schema: req.schema,
    });
    let result = [];
    if (req.body.keys) {
        result = yield collectionsService.readMany(req.body.keys);
    }
    else {
        result = yield collectionsService.readByQuery();
    }
    const meta = yield metaService.getMetaForQuery('directus_collections', {});
    res.locals.payload = { data: result, meta };
    return next();
}));
router.get('/', validate_batch_1.validateBatch('read'), readHandler, respond_1.respond);
router.search('/', validate_batch_1.validateBatch('read'), readHandler, respond_1.respond);
router.get('/:collection', async_handler_1.default((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const collectionsService = new services_1.CollectionsService({
        accountability: req.accountability,
        schema: req.schema,
    });
    const collection = yield collectionsService.readOne(req.params.collection);
    res.locals.payload = { data: collection || null };
    return next();
})), respond_1.respond);
router.patch('/:collection', async_handler_1.default((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const collectionsService = new services_1.CollectionsService({
        accountability: req.accountability,
        schema: req.schema,
    });
    yield collectionsService.updateOne(req.params.collection, req.body);
    try {
        const collection = yield collectionsService.readOne(req.params.collection);
        res.locals.payload = { data: collection || null };
    }
    catch (error) {
        if (error instanceof exceptions_1.ForbiddenException) {
            return next();
        }
        throw error;
    }
    return next();
})), respond_1.respond);
router.delete('/:collection', async_handler_1.default((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const collectionsService = new services_1.CollectionsService({
        accountability: req.accountability,
        schema: req.schema,
    });
    yield collectionsService.deleteOne(req.params.collection);
    return next();
})), respond_1.respond);
exports.default = router;
