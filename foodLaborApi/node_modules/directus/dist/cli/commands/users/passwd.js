"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const argon2_1 = __importDefault(require("argon2"));
const get_schema_1 = require("../../../utils/get-schema");
function usersPasswd({ email, password }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { default: database } = require('../../../database/index');
        const { UsersService } = require('../../../services/users');
        if (!email || !password) {
            console.error('Email and password are required');
            process.exit(1);
        }
        try {
            const passwordHashed = yield argon2_1.default.hash(password);
            const schema = yield get_schema_1.getSchema();
            const service = new UsersService({ schema, knex: database });
            const user = yield service.knex.select('id').from('directus_users').where({ email }).first();
            if (user) {
                yield service.knex('directus_users').update({ password: passwordHashed }).where({ id: user.id });
                console.log(`Password is updated for user ${user.id}`);
            }
            else {
                console.log('No such user by this email');
            }
            yield database.destroy();
            process.exit(user ? 0 : 1);
        }
        catch (err) {
            console.error(err);
            process.exit(1);
        }
    });
}
exports.default = usersPasswd;
