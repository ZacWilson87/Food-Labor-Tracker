"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhooksService = void 0;
const items_1 = require("./items");
const webhooks_1 = require("../webhooks");
class WebhooksService extends items_1.ItemsService {
    constructor(options) {
        super('directus_webhooks', options);
    }
    createOne(data, opts) {
        const _super = Object.create(null, {
            createOne: { get: () => super.createOne }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.createOne.call(this, data, opts);
            yield webhooks_1.register();
            return result;
        });
    }
    createMany(data, opts) {
        const _super = Object.create(null, {
            createMany: { get: () => super.createMany }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.createMany.call(this, data, opts);
            yield webhooks_1.register();
            return result;
        });
    }
    updateOne(key, data, opts) {
        const _super = Object.create(null, {
            updateOne: { get: () => super.updateOne }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.updateOne.call(this, key, data, opts);
            yield webhooks_1.register();
            return result;
        });
    }
    updateMany(keys, data, opts) {
        const _super = Object.create(null, {
            updateMany: { get: () => super.updateMany }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.updateMany.call(this, keys, data, opts);
            yield webhooks_1.register();
            return result;
        });
    }
    deleteOne(key, opts) {
        const _super = Object.create(null, {
            deleteOne: { get: () => super.deleteOne }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.deleteOne.call(this, key, opts);
            yield webhooks_1.register();
            return result;
        });
    }
    deleteMany(keys, opts) {
        const _super = Object.create(null, {
            deleteMany: { get: () => super.deleteMany }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.deleteMany.call(this, keys, opts);
            yield webhooks_1.register();
            return result;
        });
    }
    create(data) {
        const _super = Object.create(null, {
            create: { get: () => super.create }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.create.call(this, data);
            yield webhooks_1.register();
            return result;
        });
    }
    update(data, key) {
        const _super = Object.create(null, {
            update: { get: () => super.update }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.update.call(this, data, key);
            yield webhooks_1.register();
            return result;
        });
    }
    delete(key) {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.delete.call(this, key);
            yield webhooks_1.register();
            return result;
        });
    }
}
exports.WebhooksService = WebhooksService;
