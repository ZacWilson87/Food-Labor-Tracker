"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsService = void 0;
const items_1 = require("../services/items");
const filter_items_1 = require("../utils/filter-items");
const logger_1 = __importDefault(require("../logger"));
const app_access_permissions_1 = require("../database/system-data/app-access-permissions");
class PermissionsService extends items_1.ItemsService {
    constructor(options) {
        super('directus_permissions', options);
    }
    getAllowedFields(action, collection) {
        const results = this.schema.permissions.filter((permission) => {
            let matchesCollection = true;
            if (collection) {
                matchesCollection = permission.collection === collection;
            }
            return permission.action === action;
        });
        const fieldsPerCollection = {};
        for (const result of results) {
            const { collection, fields } = result;
            if (!fieldsPerCollection[collection])
                fieldsPerCollection[collection] = [];
            fieldsPerCollection[collection].push(...(fields !== null && fields !== void 0 ? fields : []));
        }
        return fieldsPerCollection;
    }
    readByQuery(query, opts) {
        const _super = Object.create(null, {
            readByQuery: { get: () => super.readByQuery }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.readByQuery.call(this, query, opts);
            if (Array.isArray(result) && this.accountability && this.accountability.app === true) {
                result.push(...filter_items_1.filterItems(app_access_permissions_1.appAccessMinimalPermissions.map((permission) => (Object.assign(Object.assign({}, permission), { role: this.accountability.role }))), query.filter));
            }
            return result;
        });
    }
    readMany(keys, query = {}, opts) {
        const _super = Object.create(null, {
            readMany: { get: () => super.readMany }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield _super.readMany.call(this, keys, query, opts);
            if (this.accountability && this.accountability.app === true) {
                result.push(...filter_items_1.filterItems(app_access_permissions_1.appAccessMinimalPermissions.map((permission) => (Object.assign(Object.assign({}, permission), { role: this.accountability.role }))), query.filter));
            }
            return result;
        });
    }
    readByKey(key, query = {}, action = 'read') {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.warn('PermissionsService.readByKey is deprecated and will be removed before v9.0.0. Use readOne or readMany instead.');
            if (Array.isArray(key))
                return yield this.readMany(key, query, { permissionsAction: action });
            return yield this.readOne(key, query, { permissionsAction: action });
        });
    }
}
exports.PermissionsService = PermissionsService;
