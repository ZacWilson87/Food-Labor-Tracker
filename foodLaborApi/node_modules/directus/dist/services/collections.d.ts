import { AbstractServiceOptions, Accountability, Collection, SchemaOverview } from '../types';
import { Knex } from 'knex';
import { MutationOptions } from '../services/items';
export declare class CollectionsService {
    knex: Knex;
    accountability: Accountability | null;
    schema: SchemaOverview;
    constructor(options: AbstractServiceOptions);
    /**
     * Create a single new collection
     */
    createOne(payload: Partial<Collection> & {
        collection: string;
    }, opts?: MutationOptions): Promise<string>;
    /**
     * Create multiple new collections
     */
    createMany(payloads: Partial<Collection> & {
        collection: string;
    }[], opts?: MutationOptions): Promise<string[]>;
    /**
     * Read all collections. Currently doesn't support any query.
     */
    readByQuery(): Promise<Collection[]>;
    /**
     * Get a single collection by name
     */
    readOne(collectionKey: string): Promise<Collection>;
    /**
     * Read many collections by name
     */
    readMany(collectionKeys: string[]): Promise<Collection[]>;
    /**
     * Update a single collection by name
     *
     * Note: only supports updating `meta`
     */
    updateOne(collectionKey: string, data: Partial<Collection>, opts?: MutationOptions): Promise<string>;
    /**
     * Update multiple collections by name
     */
    updateMany(collectionKeys: string[], data: Partial<Collection>): Promise<string[]>;
    /**
     * Delete a single collection This will delete the table and all records within. It'll also
     * delete any fields, presets, activity, revisions, and permissions relating to this collection
     */
    deleteOne(collectionKey: string, opts?: MutationOptions): Promise<string>;
    /**
     * Delete multiple collections by key
     */
    deleteMany(collectionKeys: string[], opts?: MutationOptions): Promise<string[]>;
    /**
     * @deprecated Use `createOne` or `createMany` instead
     */
    create(data: (Partial<Collection> & {
        collection: string;
    })[]): Promise<string[]>;
    create(data: Partial<Collection> & {
        collection: string;
    }): Promise<string>;
    /**
     * @deprecated Use `readOne` or `readMany` instead
     */
    readByKey(collection: string[]): Promise<Collection[]>;
    readByKey(collection: string): Promise<Collection>;
    /**
     * @deprecated Use `updateOne` or `updateMany` instead
     */
    update(data: Partial<Collection>, keys: string[]): Promise<string[]>;
    update(data: Partial<Collection>, key: string): Promise<string>;
    /**
     * @deprecated Use `deleteOne` or `deleteMany` instead
     */
    delete(collections: string[]): Promise<string[]>;
    delete(collection: string): Promise<string>;
}
